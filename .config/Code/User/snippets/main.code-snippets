{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"[Testing] Require no error": {
		"scope": "go",
		"prefix": "rne",
		"body": [
			"require.NoError(t, err)",
		],
		"description": "Inserts a require no error call."
	},
	"rerror": {
		"scope": "go",
		"prefix": "rer",
		"body": [
			"rerror(wr, req, $1, \"$2\", err)",
			"$3",
		],
		"description": "Inserts a require no error call."
	},
	"if err != nil": {
		"scope": "go",
		"prefix": "ien",
		"body": [
			"if err != nil {",
			"\t$1",
			"}",
			"$2",
		]
	},
	"if err != nil return err": {
		"scope": "go",
		"prefix": "iene",
		"body": [
			"if err != nil {",
			"\treturn $1err",
			"}",
			"$2"
		]
	},
	"if err != nil return": {
		"scope": "go",
		"prefix": "ienr",
		"body": [
			"if err != nil {",
			"\treturn $1, errors.WithStack(err)",
			"}",
			"",
		]
	},
	"context.WithTimeout(ctx, timeout)": {
		"scope": "go",
		"prefix": "ctxto",
		"body": [
			"ctx, cancel $1= context.WithTimeout($2, $3)",
			"defer cancel()",
			"$4",
		]
	}
}